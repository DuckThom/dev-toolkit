#!/bin/bash

CURRENT_DIR=$(pwd)
BASE_PATH=$(dirname $(readlink -f $0))
COMMANDS_PATH=""
declare -A COMMANDS

##
# Create a symlink for the dev script
#
function create-symlink () {
    echo "The 'dev' script was not found in your \$PATH"
    echo "Would you like to create a symlink? $HOME/.bin/dev => $CURRENT_DIR/dev ?"

    echo "Press enter to continue, Ctrl-C to quit"
    read

    if [ ! -d "$HOME/.bin" ]; then
        mkdir "$HOME/.bin"
    fi

    ln -s "$CURRENT_DIR/dev" "$HOME/.bin/dev" || exit 1

    echo "Symlink created, make sure that '$HOME/.bin' is in your \$PATH!"
    exit 0
}

which dev >> /dev/null 2>&1 || create-symlink

##
# Load the commands defined in the commands dir
# where the 'dev' script is located
#
function load-global-commands () {
    while IFS= read -r -d $'\0' line; do
        source "$line"

        COMMANDS[$COMMAND]="$HELP_TEXT"
    done < <(find "$BASE_PATH" -type f -iname "*.command" -print0)
}

##
# Load the commands defined in the 'dev-commands' folder
# which can be located in the current or any parent dir
#
function load-local-commands () {
    COMMANDS_PATH=$CURRENT_DIR

    while [[ "$COMMANDS_PATH" != "" && ! -e "$COMMANDS_PATH/dev-commands" ]]; do
        COMMANDS_PATH=${COMMANDS_PATH%/*}
    done

    COMMANDS_PATH="$COMMANDS_PATH/dev-commands"

    if [ -d "$COMMANDS_PATH" ]; then
        while IFS= read -r -d $'\0' line; do
            source "$line"

            COMMANDS[$COMMAND]="$HELP_TEXT"
        done < <(find "$COMMANDS_PATH" -maxdepth 1 -type f -iname "*.command" -print0)
    fi
}

##
# Generate the usage screen
#
function show-usage () {
    echo "Usage: dev <command>"
    echo
    echo "Available commands:"
    echo

    for i in "${!COMMANDS[@]}"
    do
        echo -en "\e[32m" # Green
        echo "$i:"
        echo -en "\e[36m" # Cyan
        echo "    ${COMMANDS[$i]}"
        echo -en "\e[39m" # Reset to default
        echo
    done
}

load-global-commands
load-local-commands

if [ "$1" == "" ] || [ "$1" == "help" ]; then
    show-usage
    exit 0
fi

declare -f "$1" >> /dev/null 2>&1

if [ "$?" == "0" ]; then
    eval "${@:1}"
else
    show-usage
fi
